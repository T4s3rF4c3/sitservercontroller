@page "/"
@using SitServerController.Controllers
@using SitServerController.Models
@using System.Diagnostics
@using Microsoft.AspNetCore.Http.Extensions
@using SitServerController.Pages.Components.Dashboard
@inject IConfiguration Configuration
@inject Microsoft.AspNetCore.Components.NavigationManager _navigationManager


<MudGrid>
    <MudItem md="2" xs="2">
        <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center" Style="background: #191919">
            <div class="flex-grow-1">
                <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Server Version</MudText>
                <div class="d-flex align-center my-1">
                </div>
                <MudText Typo="Typo.h4" Class="d-flex justify-center">@_serverVersion</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem md="2" xs="2">
        <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center" Style="background: #191919">
            <div class="flex-grow-1">
                <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Login Status</MudText>
                <div class="d-flex align-center my-1">
                </div>
                <MudText Typo="Typo.h4" Class="d-flex justify-center">@_status</MudText>
            </div>
        </MudPaper>
    </MudItem>
    
    <MudItem md="3" xs="3">
        <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center" Style="background: #191919">
            <div class="flex-grow-1">
                <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Compatible Game Version</MudText>
                <div class="d-flex align-center my-1">
                </div>
                <MudText Typo="Typo.h4" Class="d-flex justify-center">@_gameVersion</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem md="3" xs="3">
            <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center" Style="background: #191919">
                <div class="flex-grow-1">
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Server Status </MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                     <MudText Typo="Typo.h4" Class="d-flex justify-center">@_serverStatus <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Primary"></MudIcon></MudText>
                </div>
            </MudPaper>
        </MudItem>
    <MudItem md="2" xs="2">
        <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center" Style="background: #191919">
            <div class="flex-grow-1">
                <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Ram Usage</MudText>
                <div class="d-flex align-center my-1">
                </div>
                <MudText Typo="Typo.h4" Class="d-flex justify-center">@_serverRamUsage MB</MudText>
            </div>
        </MudPaper>
    </MudItem>
   
    <MudItem md="12" xs="12">
        <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center" Style="background: #191919">
            <div class="flex-grow-1">
                <MudText Typo="Typo.h4" Class="d-flex justify-center">
                    <MudPaper Elevation="0" Style="background: #191919; color: #968867; width: 100%">
                        <MudGrid>
                            <MudItem md="2" xs="2">
                                <div class="flex-grow-1">
                                    <MudButton Disabled="@_startDisabled" OnClick="@(() => StartServer(false))" Style="width: 100%" Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Start Server <MudIcon Icon="@Icons.Material.Filled.Start"></MudIcon></MudButton>
                                </div>
                            </MudItem>
                            <MudItem md="2" xs="2">
                                <div class="flex-grow-1">
                                    <MudButton Disabled="_restartDisabled" OnClick="@(() => RestartServer())" Style="width: 100%"  Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Restart Server <MudIcon Icon="@Icons.Material.Filled.RestartAlt"></MudIcon></MudButton>
                                </div>
                            </MudItem>
                            <MudItem md="2" xs="2">
                                <div class="flex-grow-1">
                                    <MudButton Disabled="_stopDisabled" OnClick="@(() => StopServer(false))" Style="width: 100%"  Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Stop Server <MudIcon Icon="@Icons.Material.Filled.Stop"></MudIcon></MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudText>
            </div>
        </MudPaper>
    </MudItem>
    
    <MudItem md="12" xs="12">
        <DashboardPlayerTable PlayerList="PlayerList"></DashboardPlayerTable>
    </MudItem>



</MudGrid>

@code {
    private AccountStatus _status;
    private PlayerInformation[] players;
    private string _serverVersion;
    private string _gameVersion;
    private int _serverProcessId;
    private int _serverRamUsage;
    private Server _server;

    private bool _startDisabled;
    private bool _restartDisabled;
    private bool _stopDisabled;

    private IEnumerable<PlayerInformation> PlayerList = new List<PlayerInformation>();
    private bool _serverStatus;
    
    protected override async Task OnInitializedAsync()
    {
        _serverStatus = CheckServerStatus();
        _server = new Server();
        if (_serverStatus)
        {
            _startDisabled = true;
            _restartDisabled = false;
            _stopDisabled = false;
            try
            {
                await Login();
                await GetProfiles();
                GetServerInformation();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            _startDisabled = false;
            _restartDisabled = true;
            _stopDisabled = true;
        }

        _serverStatus = CheckServerStatus();
        
        StartLoop();
    }

    async Task Login()
    {
        LoginModel loginModel = new LoginModel();
        loginModel.Password = _server.LoginPassword;
        loginModel.Username = _server.LoginUsername;
        _status = await AccountManager.LoginAsync(loginModel);
    }

    async Task GetProfiles()
    {
        players = AccountManager.GetExistingProfiles();
        PlayerList = players.ToList();
    }

    void GetServerInformation()
    {
        _serverVersion = ServerManager.GetVersion();
        _gameVersion = ServerManager.GetCompatibleGameVersion();
    }

    bool CheckServerStatus()
    {
        try
        {
            Process[] processes = Process.GetProcessesByName("Aki.Server");
            if (processes.Length > 0)
            {
                Console.WriteLine(processes[0].ProcessName);
                _serverStatus = true;
                _serverProcessId = processes[0].Id;
                return true;
                
            }
            _serverStatus = false;
            return false;
        }
        catch(Exception ex)
        {
            Console.WriteLine("Checking Server Error: " + ex.Message);
            return false;
        }
    }

    void UpdateRamUsage()
    {
        if (_serverStatus == true)
        {
            try
            {
                int memsize = 0;
                Process proc = Process.GetProcessById(_serverProcessId);
                PerformanceCounter counter = new PerformanceCounter();
                counter.CategoryName = "Process";
                counter.CounterName = "Working Set - Private";
                counter.InstanceName = proc.ProcessName;
                memsize = Convert.ToInt32(counter.NextValue()) / (int)(1024);
                _serverRamUsage = memsize/1024;
                
                Console.WriteLine("Memory: " + memsize/1024 + "MB");
                
                counter.Close();
                counter.Dispose();
                
                StateHasChanged();
            }
            catch
            {
                
            }
        }
        
    }


    void StartServer(bool isRestart)
    {
        _startDisabled = true;
        _stopDisabled = false;
        _restartDisabled = false;
        if (CheckServerStatus()) return;
        Console.WriteLine("Server Status: " + _serverStatus);
        try
        {
            if (_serverStatus == false)
            {
                Console.WriteLine(Environment.CurrentDirectory);
                var path = Environment.CurrentDirectory + "\\GameServer\\Lol";
                Process proc = new();
                proc.StartInfo.UseShellExecute = true;
                proc.StartInfo.FileName = $@"{path}";
                proc.Start();
                CheckServerStatus();
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine("Starting Server Error: " + ex.Message);
        }
        if (!isRestart) ReloadDashboardPage();
    }
    
    void ReloadDashboardPage()
    {
        _navigationManager.NavigateTo("/", true);
    }

    void StopServer(bool isRestart)
    {
        _stopDisabled = true;
        _startDisabled = false;
        _restartDisabled = true;
        try
        {
            Process.GetProcessesByName("Aki.Server")[0].Kill();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Stopping Server Error: " + ex.Message);
        }
        if (!isRestart)
        {
            ReloadDashboardPage();
        }
    }

    void RestartServer()
    {
        _restartDisabled = false;
        _stopDisabled = false;
        _startDisabled = true;
        var path = Environment.CurrentDirectory + "\\GameServer\\Lol";
        if (_serverStatus == true)
        {
            Process.GetProcessesByName("Aki.Server")[0].Kill();
            Process proc = new();
            proc.StartInfo.UseShellExecute = true;
            proc.StartInfo.FileName = $@"{path}";
            proc.Start();
            _serverProcessId = proc.Id;
        }
        else
        {
            try
            {
                Process.GetProcessById(_serverProcessId).Kill();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
            Process proc = new();
            proc.StartInfo.UseShellExecute = true;
            proc.StartInfo.FileName = $@"{path}";
            proc.Start();
            _restartDisabled = true;
            _stopDisabled = true;
            _startDisabled = true;
            _serverProcessId = proc.Id;
        }
        CheckServerStatus();
        ReloadDashboardPage();
    }
    
    void StartLoop()
    {
        Timer timer = new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(() =>
            {
                //UpdateRamUsage();
                StateHasChanged();
            });

        }), null, 10000, 10000);
    }
}