@using SitServerController.Models
@using SitServerController.Controllers
@inject IDialogService DialogService

<MudItem md="12" xs="12">
    <MudCard Style="background: #191919">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary"><MudImage Src="/side_bear.png" Style="height: 50%; width: 50%"></MudImage></MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                @if (_fullProfile.info.wipe)
                {
                    <MudText Typo="Typo.body1" Style="color: red">@_fullProfile.info.username</MudText>
                    <MudText Typo="Typo.body1" Style="color: red">@_fullProfile.info.edition</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">@_fullProfile.info.username</MudText>
                    <MudText Typo="Typo.body2">@_fullProfile.info.edition</MudText>
                }

            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton @onclick="@(() => WipeUser(_fullProfile))" Icon="@Icons.Material.Filled.CleaningServices" Color="Color.Warning"/>
                <MudIconButton Disabled="true" @onclick="@(() => DeleteUser(_fullProfile))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"/>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="d-flex pa-4" Style="">
            <MudPaper Class="d-flex pa-4" Style="width: 20em;background: #191919">
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h4" Class="d-flex justify-center">@_raidCount</MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Raids</MudText>
                </div>
            </MudPaper>
            <MudPaper Class="d-flex pa-4" Style="width: 20em;background: #191919">
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h4" Class="d-flex justify-center">@_raidCountSurvived</MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Survived</MudText>
                </div>
            </MudPaper>
                            
            <MudPaper Class="d-flex pa-4" Style="width: 20em;background: #191919">
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h4" Class="d-flex justify-center">@_survivalRate%</MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Survival Rate</MudText>
                </div>
            </MudPaper>
                            
            <MudPaper Class="d-flex pa-4" Style="width: 20em;background: #191919">
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h4" Class="d-flex justify-center">@_kills</MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">Kills</MudText>
                </div>
            </MudPaper>
                            
                            
            <MudPaper Class="d-flex pa-4" Style="width: 20em;background: #191919">
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h4" Class="d-flex justify-center">@_deaths</MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">KIA</MudText>
                </div>
            </MudPaper>
                            
            <MudPaper Class="d-flex pa-4" Style="width: 20em;background: #191919">
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h4" Class="d-flex justify-center">@_killDeathRatio</MudText>
                    <div class="d-flex align-center my-1">
                    </div>
                    <MudText Color="Color.Primary" Typo="Typo.h6" Class="d-flex justify-center">K/D</MudText>
                </div>
            </MudPaper>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Parameter] public PlayerFullProfile _fullProfile { get; set; }
    [Parameter] public PlayerInformation _player { get; set; }
    
    //Overall Data
    private float _raidCount { get; set; }
    private float _raidCountSurvived { get; set; }
    private float _kills { get; set; }
    private float _deaths { get; set; }
    private float _survivalRate { get; set; }
    private float _killDeathRatio { get; set; }
    void GetPlayerOverallInformation()
    {
        _raidCount = _fullProfile.GetRaids();
        _raidCountSurvived = _fullProfile.GetSurvivedRaids();
        _kills = _fullProfile.GetKills();
        _deaths = _fullProfile.GetDeaths();
        if (_raidCount > 0)
        {
            _survivalRate = (float)System.Math.Floor(Convert.ToDouble(_raidCountSurvived / _raidCount * 100));
        }
        else
        {
            _survivalRate = 0;
        }

        if (_deaths == 0)
        {
            _killDeathRatio = _kills;
        }
        else
        {
            _killDeathRatio = (float)Math.Round(Convert.ToDecimal(_kills / _deaths),2);
        }
    }

    private async Task DeleteUser(PlayerFullProfile profile)
    {
        var parameters = new DialogParameters<ProfileInformationUserDelete>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this " + profile.info.username +  "'s profile? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ProfileInformationUserDelete>("Delete Player", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
    //Wipe user
            
            Console.WriteLine("About to remove: " + profile.info.username);
            LoginRequestData data = new LoginRequestData(profile.info.username, profile.info.password);
            RequestHandler.RequestRemove(data);
        }
    }
    
    private async Task WipeUser(PlayerFullProfile profile)
    {
        var parameters = new DialogParameters<ProfileInformationUserDelete>();
        parameters.Add(x => x.ContentText, "Do you really want to wipe this player's data? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Wipe");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ProfileInformationUserDelete>("Wipe Player", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //Wipe user
            Console.WriteLine("Account Username to delete: " + AccountManager.SelectedAccount.username);
            await AccountManager.RemoveAsync();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (_player.Nickname != "unknown")
        {
            await Login(_fullProfile.info.username, _fullProfile.info.password);
            GetPlayerOverallInformation();
        }
    }

    private AccountStatus _status { get; set; }
    async Task Login(string username, string password)
    {
        LoginModel loginModel = new LoginModel();
        _status = await AccountManager.LoginAsync(loginModel);
    }
}